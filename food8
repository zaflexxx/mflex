local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")

-- List of food names and target quantity (change as needed)
local MOfoods = {
    "Donut", "Coffee", "Bagel", "EZ Taco", "Omelette", "Hotdog", "Pancakes", "Tofu Beef Soup",
    "Pie", "Tokito Sake", "Hamburger", "Chicken Fries", "Ramen"
}
local targetQuantity = 8
local foodDistances = {}
local macroSpot = HRP.Position

-- Update food distances
local function UpdateFoodDistances()
    foodDistances = {}
    for _, foodName in ipairs(MOfoods) do
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj.Name:split(":")[1] == foodName and obj:FindFirstChild("ClickDetector") then
                local targetPart = obj:FindFirstChild("Head") or obj:FindFirstChild("PrimaryPart") or obj:FindFirstChildWhichIsA("BasePart")
                if targetPart then
                    local distance = (targetPart.Position - HRP.Position).Magnitude
                    table.insert(foodDistances, {name = foodName, object = obj, distance = distance})
                end
            end
        end
    end
    table.sort(foodDistances, function(a, b)
        return a.distance < b.distance
    end)
end

-- Check if the player has a certain quantity of food
local function CheckFoodQuantity(foodName)
    local quantity = 0
    for _, item in pairs(player.Backpack:GetChildren()) do
        if item.Name == foodName and item:FindFirstChild("Quantity") then
            quantity = item.Quantity.Value
            break
        end
    end
    return quantity
end

-- Function to compute path and move to target
local function MoveToTarget(targetPosition)
    local path = PathfindingService:CreatePath({
        AgentRadius = 2, -- Adjust based on your character size
        AgentHeight = 5,
        AgentCanJump = true,
        AgentJumpHeight = 7,
        AgentMaxSlope = 45,
    })

    -- Compute the path to the target
    local success, errorMessage = pcall(function()
        path:ComputeAsync(HRP.Position, targetPosition)
    end)

    if not success then
        warn("Failed to compute path: " .. errorMessage)
        return
    end

    -- Follow the path
    for _, waypoint in ipairs(path:GetWaypoints()) do
        -- Move the character
        player.Character.Humanoid:MoveTo(waypoint.Position)
        player.Character.Humanoid.MoveToFinished:Wait()
    end
end

-- Main loop to walk to food and check quantities
while true do
    -- Check if all food types have 0 quantity (after eating them)
    local allFoodsZero = true
    for _, foodName in ipairs(MOfoods) do
        local quantity = CheckFoodQuantity(foodName)
        if quantity > 0 then
            allFoodsZero = false
            break
        end
    end

    -- If all foods have 0 quantity, start the collection process
    if allFoodsZero then
        print("All foods have 0 quantity. Starting collection process...")

        -- Update food distances to find the closest food
        UpdateFoodDistances()

        -- Loop through food types, and collect each until it reaches the target quantity
        for _, foodData in ipairs(foodDistances) do
            local foodName = foodData.name
            local targetPart = foodData.object:FindFirstChild("Head") or foodData.object:FindFirstChild("PrimaryPart") or foodData.object:FindFirstChildWhichIsA("BasePart")

            if targetPart then
                print("Moving to target position: " .. tostring(targetPart.Position))

                -- Move to the food target
                MoveToTarget(targetPart.Position)

                -- Wait for the food to reach the target quantity
                local quantity = CheckFoodQuantity(foodName)
                print(foodName .. " quantity: " .. quantity)

                repeat
                    wait(1)
                    quantity = CheckFoodQuantity(foodName)
                    print(foodName .. " quantity: " .. quantity)
                until quantity >= targetQuantity

                print(foodName .. " has reached the target quantity.")
            else
                print("Could not find target part for food: " .. foodName)
            end
        end

        -- Once all food types have reached the target quantity, return to the macro spot
        print("All foods at target quantity. Returning to macro spot...")
        MoveToTarget(macroSpot)
        print("Returned to macro spot.")
        break
    else
        print("Not all foods have 0 quantity. Waiting...")

        -- Wait for a moment before checking again
        wait(2)
    end
end
