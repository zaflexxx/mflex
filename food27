-- MOfoods list for checking
local MOfoods = {
    "Donut", "Pancakes", "Pie", "Hamburger", "Omelette", "Chicken Fries", "Tokito Sake", "Ramen", "Tofu Beef Soup"
}

-- Foods list with the correct positions
local foods = {
    Donut = Vector3.new(-1031, 54, -562),
    Pancakes = Vector3.new(-1032, 53, -570),
    Pie = Vector3.new(-1037, 53, -571),
    Hamburger = Vector3.new(-1050, 52, -572),
    Omelette = Vector3.new(-1050, 52, -572),
    Chicken_Fries = Vector3.new(-1127, 52, -298),
    Tokito_Sake = Vector3.new(-1127, 52, -298),
    Ramen = Vector3.new(-1127, 52, -298),
    Tofu_Beef_Soup = Vector3.new(-1127, 52, -298)
}

-- Function to check if all foods are at quantity 0
local function checkFoodQuantities()
    for _, food in ipairs(MOfoods) do
        local foodName = food
        local foodQuantity = 0
        -- Check if the food is in the backpack
        local foodItem = game.Players.LocalPlayer.Backpack:FindFirstChild(foodName)
        if foodItem and foodItem:FindFirstChild("Quantity") then
            foodQuantity = foodItem.Quantity.Value -- Access the Value property of Quantity
        end
        
        -- Check if the food is in workspace
        local workspaceItem = workspace:FindFirstChild("live") and workspace.live.localplayer:FindFirstChild(foodName)
        if workspaceItem then
            foodQuantity = 1  -- Since it's equipped, consider quantity as 1
        end

        if foodQuantity > 0 then
            print(foodName .. " quantity: " .. foodQuantity)
        end
    end
end

-- Function to walk to the target position
local function moveToPosition(targetPosition)
    local PathfindingService = game:GetService("PathfindingService")
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then
        warn("Character or HumanoidRootPart not found!")
        return
    end

    -- Create a path
    local path = PathfindingService:CreatePath({
        AgentRadius = 2, -- Adjust to match your character's size
        AgentHeight = 5, -- Adjust to match your character's height
        AgentCanJump = true,
        AgentJumpHeight = 7, -- Adjust to allow for obstacles
        AgentMaxSlope = 45 -- Adjust for climbable slopes
    })

    -- Compute the path to the target position
    path:ComputeAsync(rootPart.Position, targetPosition)

    -- Check if the path is valid
    if path.Status == Enum.PathStatus.Complete then
        -- Get the waypoints from the path
        local waypoints = path:GetWaypoints()

        -- Walk through the waypoints
        for _, waypoint in ipairs(waypoints) do
            humanoid:MoveTo(waypoint.Position)
            humanoid.MoveToFinished:Wait()

            -- If the waypoint requires jumping, make the humanoid jump
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end

        print("Reached the target!")
    else
        warn("Pathfinding failed!")
    end
end

-- Main function to manage food checking and walking logic
local function main()
    local targetFood = nil

    -- Check food quantities
    checkFoodQuantities()

    -- Find the nearest food with quantity 0
    for _, food in ipairs(MOfoods) do
        local foodName = food
        local foodQuantity = 0
        local foodItem = game.Players.LocalPlayer.Backpack:FindFirstChild(foodName)
        
        if foodItem and foodItem:FindFirstChild("Quantity") then
            foodQuantity = foodItem.Quantity.Value
        end
        
        local workspaceItem = workspace:FindFirstChild("live") and workspace.live.localplayer:FindFirstChild(foodName)
        if workspaceItem then
            foodQuantity = 1 -- Already equipped, assume it's in use
        end
        
        -- Check if food is missing
        if foodQuantity == 0 then
            -- Set the target position for this food
            targetFood = food
            break
        end
    end

    if targetFood then
        -- Use the foods table to get the target position
        local targetPosition = foods[targetFood] -- No gsub here, keeping the original names intact
        if targetPosition then
            -- Save current position to return
            local currentPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            -- Move to the target food position
            moveToPosition(targetPosition)
            -- After getting the food, return to the original position
            moveToPosition(currentPosition)
        else
            print("No target position found for " .. targetFood)
        end
    end
end

-- Execute the main function
main()
