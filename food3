local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")

local MOfoods = {
    "Donut", "Coffee", "Bagel", "EZ Taco", "Omelette", "Hotdog", "Pancakes", "Tofu Beef Soup",
    "Pie", "Tokito Sake", "Hamburger", "Chicken Fries", "Ramen"
}
local targetQuantity = 8
local foodDistances = {}
local macroSpot = HRP.Position

-- Update food distances
local function UpdateFoodDistances()
    foodDistances = {}
    for _, foodName in ipairs(MOfoods) do
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj.Name:split(":")[1] == foodName and obj:FindFirstChild("ClickDetector") then
                local targetPart = obj:FindFirstChild("Head") or obj:FindFirstChild("PrimaryPart") or obj:FindFirstChildWhichIsA("BasePart")
                if targetPart then
                    local distance = (targetPart.Position - HRP.Position).Magnitude
                    table.insert(foodDistances, {name = foodName, object = obj, distance = distance})
                end
            end
        end
    end
    table.sort(foodDistances, function(a, b)
        return a.distance < b.distance
    end)
end

-- Check if the player has a certain quantity of food
local function CheckFoodQuantity(foodName)
    local quantity = 0
    for _, item in pairs(player.Backpack:GetChildren()) do
        if item.Name == foodName and item:FindFirstChild("Quantity") then
            quantity = item.Quantity.Value
            break
        end
    end
    return quantity
end

-- Check if only one food type is left in the backpack
local function OnlyOneFoodLeft()
    local foodCount = 0
    for _, foodName in ipairs(MOfoods) do
        if CheckFoodQuantity(foodName) > 0 then
            foodCount = foodCount + 1
        end
    end
    return foodCount == 1
end

-- Check if all foods have reached the target quantity
local function AllFoodsAtTarget()
    for _, foodName in ipairs(MOfoods) do
        if CheckFoodQuantity(foodName) < targetQuantity then
            return false
        end
    end
    return true
end

-- Main loop to walk to food and check quantities
while true do
    if AllFoodsAtTarget() then
        print("All foods at target quantity. Returning to macro spot...")
        local path = PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            AgentJumpHeight = 7,
            AgentMaxSlope = 45,
        })
        
        path:ComputeAsync(HRP.Position, macroSpot)
        path:MoveTo(player.Character)  -- Move to the macro spot
        path.StatusChanged:Connect(function()
            if path.Status == Enum.PathStatus.Complete then
                print("Returned to macro spot.")
            end
        end)
        break
    else
        UpdateFoodDistances()
        
        for _, foodData in ipairs(foodDistances) do
            local foodName = foodData.name
            local targetPart = foodData.object:FindFirstChild("Head") or foodData.object:FindFirstChild("PrimaryPart") or foodData.object:FindFirstChildWhichIsA("BasePart")
            
            if targetPart then
                print("Moving to target position: " .. tostring(targetPart.Position))
                local path = PathfindingService:CreatePath({
                    AgentRadius = 2,
                    AgentHeight = 5,
                    AgentCanJump = true,
                    AgentJumpHeight = 7,
                    AgentMaxSlope = 45,
                })

                path:ComputeAsync(HRP.Position, targetPart.Position)
                path:MoveTo(player.Character)  -- Move to the food spot

                path.StatusChanged:Connect(function()
                    if path.Status == Enum.PathStatus.Complete then
                        print("Reached target position: " .. tostring(targetPart.Position))  -- Print once when reached
                    elseif path.Status == Enum.PathStatus.ClosestNoPath then
                        warn("Pathfinding failed: No valid path to target.")
                    end
                end)

                -- Wait for the path to complete
                repeat
                    wait(0.1)
                until path.Status == Enum.PathStatus.Complete or path.Status == Enum.PathStatus.ClosestNoPath
                
                -- After moving, check if the character really reached the position
                local distanceToTarget = (player.Character.HumanoidRootPart.Position - targetPart.Position).Magnitude
                print("Distance to target after moving: " .. distanceToTarget)
                
                print("Waiting for food quantity to reach target...")
                
                repeat
                    wait(1)
                    local quantity = CheckFoodQuantity(foodName)
                    print(foodName .. " quantity: " .. quantity)
                until quantity >= targetQuantity
                
                print(foodName .. " has reached the target quantity.")
            else
                print("Could not find target part for food: " .. foodName)
            end
        end
    end
    wait(5)  -- Small delay before checking the next food item
end
