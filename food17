local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")

-- Set the default food quantity
local foodQuantity = 8  -- Default to 8, but you can change it

-- Food names and their target positions
local foods = {
    Donut = Vector3.new(-1031, 54, -562),
    Pancakes = Vector3.new(-1032, 53, -570),
    Pie = Vector3.new(-1037, 53, -571),
    Hamburger = Vector3.new(-1050, 52, -572),
    Omelette = Vector3.new(-1050, 52, -572),
    Chicken_Fries = Vector3.new(-1127, 52, -298),
    Tokito_Sake = Vector3.new(-1127, 52, -298),
    Ramen = Vector3.new(-1127, 52, -298),
    Tofu_Beef_Soup = Vector3.new(-1127, 52, -298)
}

-- MOfoods list for checking
local MOfoods = {
    "Donut", "Pancakes", "Pie", "Hamburger", "Omelette", "Chicken Fries", "Tokito Sake", "Ramen", "Tofu Beef Soup"
}

-- Function to check if a food has the required quantity
local function HasRequiredQuantity(foodName)
    local quantity = 0
    
    -- Check Backpack for food items
    for _, item in pairs(player.Backpack:GetChildren()) do
        if item.Name == foodName and item:FindFirstChild("Quantity") then
            quantity = item.Quantity.Value
            break
        end
    end

    -- Check Character for equipped food items (in workspace.live.localplayer)
    if quantity == 0 then
        local equippedFood = workspace:FindFirstChild("live") and workspace.live:FindFirstChild("localplayer") and workspace.live.localplayer:FindFirstChild(foodName)
        if equippedFood and equippedFood:FindFirstChild("Quantity") then
            quantity = equippedFood.Quantity.Value
        end
    end

    return quantity
end

-- Function to print food quantities
local function PrintFoodQuantities()
    print("Food Quantities:")
    for _, foodName in ipairs(MOfoods) do
        local quantity = HasRequiredQuantity(foodName)
        print(foodName .. ": " .. quantity)
    end
end

-- Function to move the character to a position
local function MoveToTarget(targetPosition)
    local path = PathfindingService:CreatePath({
        AgentRadius = 2, -- Adjust to match your character's size
        AgentHeight = 5, -- Adjust to match your character's height
        AgentCanJump = true,
        AgentJumpHeight = 7, -- Adjust to allow for obstacles
        AgentMaxSlope = 45 -- Adjust for climbable slopes
    })

    -- Compute the path to the target position
    path:ComputeAsync(HRP.Position, targetPosition)

    -- Check if the path is valid
    if path.Status == Enum.PathStatus.Success then
        -- Get the waypoints from the path
        local waypoints = path:GetWaypoints()

        -- Walk through the waypoints
        for _, waypoint in ipairs(waypoints) do
            player.Character.Humanoid:MoveTo(waypoint.Position)
            player.Character.Humanoid.MoveToFinished:Wait()

            -- If the waypoint requires jumping, make the humanoid jump
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end

        print("Reached the target!")
    else
        warn("Pathfinding failed!")
    end
end

-- Function to process each food in MOfoods list
local function ProcessFoods()
    local lastPrintTime = tick()

    -- Loop through each food in the list and check if it needs to be bought
    for _, foodName in ipairs(MOfoods) do
        while HasRequiredQuantity(foodName) < foodQuantity do
            print(foodName .. " quantity is low. Moving to " .. foodName)
            MoveToTarget(foods[foodName])  -- Move to food position
            wait(1) -- Wait for a short period to check quantity while walking
            PrintFoodQuantities()  -- Print quantities to track progress
        end
    end
end

-- Main function to handle food gathering
local function Main()
    -- First, print all food quantities before starting
    PrintFoodQuantities()

    -- Loop through and check each food
    ProcessFoods()

    -- After gathering food, you can add logic to go back to the macro spot or another action.
end

-- Start the main process
Main()
