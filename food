local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")
local humanoid = player.Character:WaitForChild("Humanoid")

local MOfoods = {
    "Donut", "Coffee", "Bagel", "EZ Taco", "Omelette", "Hotdog", "Pancakes", "Tofu Beef Soup",
    "Pie", "Tokito Sake", "Hamburger", "Chicken Fries", "Ramen"
}
local targetQuantity = 8
local foodDistances = {}
local macroSpot = HRP.Position

-- Function to move to a given position
local function PathfindTo(position)
    if not HRP or not HRP.Position or not position then
        warn("Invalid HRP or target position.")
        return
    end

    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        AgentJumpHeight = 10,
        AgentMaxSlope = 45,
        AgentCanClimb = true,
    })

    local success, errorMessage = pcall(function()
        path:ComputeAsync(HRP.Position, position)
    end)

    if not success or path.Status ~= Enum.PathStatus.Success then
        warn("Pathfinding failed: " .. (errorMessage or "no path"))
        humanoid:MoveTo(position) -- Fallback to direct movement
        return
    end

    for _, waypoint in ipairs(path:GetWaypoints()) do
        humanoid:MoveTo(waypoint.Position)
        local reached = humanoid.MoveToFinished:Wait()
        if not reached then
            warn("Failed to reach waypoint: " .. tostring(waypoint.Position))
            break
        end
        if waypoint.Action == Enum.PathWaypointAction.Jump then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- Update food distances
local function UpdateFoodDistances()
    foodDistances = {}
    for _, foodName in ipairs(MOfoods) do
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj.Name:split(":")[1] == foodName and obj:FindFirstChild("ClickDetector") then
                local targetPart = obj:FindFirstChild("Head") or obj:FindFirstChild("PrimaryPart") or obj:FindFirstChildWhichIsA("BasePart")
                if targetPart then
                    local distance = (targetPart.Position - HRP.Position).Magnitude
                    table.insert(foodDistances, {name = foodName, object = obj, distance = distance})
                end
            end
        end
    end
    table.sort(foodDistances, function(a, b)
        return a.distance < b.distance
    end)
end

-- Check food quantity
local function CheckFoodQuantity(foodName)
    local quantity = 0
    for _, item in pairs(player.Backpack:GetChildren()) do
        if item.Name == foodName and item:FindFirstChild("Quantity") then
            quantity = item.Quantity.Value
            break
        end
    end
    return quantity
end

-- Check if only one food type is left
local function OnlyOneFoodLeft()
    local foodCount = 0
    for _, foodName in ipairs(MOfoods) do
        if CheckFoodQuantity(foodName) > 0 then
            foodCount = foodCount + 1
        end
    end
    return foodCount == 1
end

-- Check if all foods have reached target quantity
local function AllFoodsAtTarget()
    for _, foodName in ipairs(MOfoods) do
        if CheckFoodQuantity(foodName) < targetQuantity then
            return false
        end
    end
    return true
end

-- Main loop
while true do
    if OnlyOneFoodLeft() then
        print("Only one food type left. Walking to all food spots...")
        UpdateFoodDistances()

        for _, foodData in ipairs(foodDistances) do
            local targetPart = foodData.object:FindFirstChild("Head") or foodData.object:FindFirstChild("PrimaryPart") or foodData.object:FindFirstChildWhichIsA("BasePart")
            if targetPart then
                print("Pathfinding to: " .. foodData.name)
                PathfindTo(targetPart.Position)

                repeat
                    wait(1)
                    local quantity = CheckFoodQuantity(foodData.name)
                    print(foodData.name .. " quantity: " .. quantity)
                until quantity >= targetQuantity or AllFoodsAtTarget()
            end
        end
        print("Returning to macro spot...")
        PathfindTo(macroSpot)
        print("Returned to macro spot.")
    else
        print("More than one food type available. Waiting...")
        wait(30)
    end
end
