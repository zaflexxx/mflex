local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HRP = player.Character:WaitForChild("HumanoidRootPart")

-- Food names and their target positions
local foods = {
    Donut = Vector3.new(-1031, 54, -562),
    Pancakes = Vector3.new(-1032, 53, -570),
    Pie = Vector3.new(-1037, 53, -571),
    Hamburger = Vector3.new(-1050, 52, -572),
    Omelette = Vector3.new(-1050, 52, -572),
    Chicken_Fries = Vector3.new(-1127, 52, -298),
    Tokito_Sake = Vector3.new(-1127, 52, -298),
    Ramen = Vector3.new(-1127, 52, -298),
    Tofu_Beef_Soup = Vector3.new(-1127, 52, -298)
}

-- MOfoods list for checking
local MOfoods = {
    "Donut", "Pancakes", "Pie", "Hamburger", "Omelette", "Chicken Fries", "Tokito Sake", "Ramen", "Tofu Beef Soup"
}

-- Food quantities needed
local requiredQuantity = 12 -- Change this to whatever quantity is required

-- Macro spot position (where the bot will return to after gathering all foods)
local macroSpot = Vector3.new(500, 50, -500)  -- Change this to the desired macro spot coordinates

-- Update food distances
local function UpdateFoodDistances()
    foodDistances = {}
    for foodName, targetPosition in pairs(foods) do
        local distance = (targetPosition - HRP.Position).Magnitude
        table.insert(foodDistances, {name = foodName, position = targetPosition, distance = distance})
    end
    table.sort(foodDistances, function(a, b)
        return a.distance < b.distance
    end)
end

-- Check if a food has the required quantity
local function HasRequiredQuantity(foodName)
    local quantity = 0
    -- Check Backpack for food items
    for _, item in pairs(player.Backpack:GetChildren()) do
        if item.Name == foodName and item:FindFirstChild("Quantity") then
            quantity = item.Quantity.Value
            break
        end
    end

    -- Check Character for equipped food items (if any)
    if quantity == 0 then
        for _, item in pairs(player.Character:GetChildren()) do
            if item.Name == foodName and item:FindFirstChild("Quantity") then
                quantity = item.Quantity.Value
                break
            end
        end
    end

    return quantity >= requiredQuantity
end

-- Function to move the character to a position
local function MoveToTarget(targetPosition)
    local path = PathfindingService:CreatePath({
        AgentRadius = 2, -- Adjust to match your character's size
        AgentHeight = 5, -- Adjust to match your character's height
        AgentCanJump = true,
        AgentJumpHeight = 7, -- Adjust to allow for obstacles
        AgentMaxSlope = 45 -- Adjust for climbable slopes
    })

    -- Compute the path to the target position
    path:ComputeAsync(HRP.Position, targetPosition)

    -- Check if the path is valid
    if path.Status == Enum.PathStatus.Complete then
        -- Get the waypoints from the path
        local waypoints = path:GetWaypoints()

        -- Walk through the waypoints
        for _, waypoint in ipairs(waypoints) do
            player.Character.Humanoid:MoveTo(waypoint.Position)
            player.Character.Humanoid.MoveToFinished:Wait()

            -- If the waypoint requires jumping, make the humanoid jump
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end

        print("Reached the target!")
    else
        warn("Pathfinding failed!")
    end
end

-- Function to process each food in MOfoods list
local function ProcessFoods()
    UpdateFoodDistances()

    local lastPrintTime = tick()

    -- Loop through each food in the sorted list of distances
    for _, food in ipairs(foodDistances) do
        print("Checking " .. food.name)
        -- Only move to food if the player has not yet reached the required quantity
        while not HasRequiredQuantity(food.name) do
            local currentTime = tick()

            -- Print the status every 30 seconds
            if currentTime - lastPrintTime >= 30 then
                print(food.name .. ": " .. "Quantity is " .. (HasRequiredQuantity(food.name) and "sufficient" or "insufficient"))
                lastPrintTime = currentTime
            end

            print("Moving to " .. food.name)
            MoveToTarget(food.position)
            wait(1) -- Wait for a short period to check quantity while walking
        end
        print("Required quantity reached for " .. food.name)
    end
end

-- Function to return to the macro spot after gathering all foods
local function ReturnToMacroSpot()
    local lastPrintTime = tick()

    print("Returning to macro spot...")

    -- Print status every 30 seconds while returning
    while (HRP.Position - macroSpot).Magnitude > 10 do
        local currentTime = tick()

        -- Print the status every 30 seconds
        if currentTime - lastPrintTime >= 30 then
            print("Returning to macro spot, distance remaining: " .. (HRP.Position - macroSpot).Magnitude)
            lastPrintTime = currentTime
        end

        MoveToTarget(macroSpot)
        wait(1) -- Wait before checking again
    end

    print("Reached macro spot!")
end

-- Function to check if all foods have been reached
local function AllFoodsGathered()
    local allFoodsGathered = true
    for _, foodName in ipairs(MOfoods) do
        if not HasRequiredQuantity(foodName) then
            allFoodsGathered = false
            break
        end
    end
    return allFoodsGathered
end

-- Main function to handle food gathering and returning to macro spot
local function Main()
    -- Check if all foods have quantity 0 (indicating the need to move)
    local lastPrintTime = tick()
    while not AllFoodsGathered() do
        -- Print status every 30 seconds
        local currentTime = tick()
        if currentTime - lastPrintTime >= 30 then
            print("More than 1 food is missing quantity. Not walking yet.")
            lastPrintTime = currentTime
        end
        ProcessFoods()
        wait(1) -- Wait before checking again
    end

    print("All foods reached 0 quantity, going to walk to gather them.")
    ProcessFoods()
    ReturnToMacroSpot()
end

-- Start the main process
Main()
